from Bio import SeqIO
from Bio.Data import CodonTable
table = 'Scenedesmus obliquus Mitochondrial'
min_pro_len = 100
frame=1
map= {
    'ATA':'I', 'ATC':'I', 'ATT':'I', 'ATG':'M',
    'ACA':'T', 'ACC':'T', 'ACG':'T', 'ACT':'T',
    'AAC':'N', 'AAT':'N', 'AAA':'K', 'AAG':'K',
    'AGC':'S', 'AGT':'S', 'AGA':'R', 'AGG':'R',
    'CTA':'L', 'CTC':'L', 'CTG':'L', 'CTT':'L',
    'CCA':'P', 'CCC':'P', 'CCG':'P', 'CCT':'P',
    'CAC':'H', 'CAT':'H', 'CAA':'Q', 'CAG':'Q',
    'CGA':'R', 'CGC':'R', 'CGG':'R', 'CGT':'R',
    'GTA':'V', 'GTC':'V', 'GTG':'V', 'GTT':'V',
    'GCA':'A', 'GCC':'A', 'GCG':'A', 'GCT':'A',
    'GAC':'D', 'GAT':'D', 'GAA':'E', 'GAG':'E',
    'GGA':'G', 'GGC':'G', 'GGG':'G', 'GGT':'G',
    'TCA':'S', 'TCC':'S', 'TCG':'S', 'TCT':'S',
    'TTC':'F', 'TTT':'F', 'TTA':'L', 'TTG':'L',
    'TAC':'Y', 'TAT':'Y', 'TAA':'*', 'TAG':'*',
    'TGC':'C', 'TGT':'C', 'TGA':'*', 'TGG':'W',}

def translate_DNA_codon(seq): 
	sp=['TAA', 'TAG','TGA']	
	l= dict()
#	position_start=0
#	position_fin=0
	for a in range(0,len(seq)-3,3):
		if seq[a:].startswith('ATG'):
			prot=''
			start=a
#	position_start=seq[start:]
			seq_start=seq[int(start):]
			for ss in sp :
				if seq_start.find(ss)!=-1:
					stop=seq_start.find(ss)
#	position_fin=seq[:stop+3]
					cds=str(seq_start[:int(stop)+3])

					for i in range (0, len(cds), 3):
						if len(cds)%3==0: 
							if cds[i:i+3] in map: 
									codon=cds[i:i+3]
									prot+= map[codon]
					l[prot] = [len(prot)]
	bigcount=None
	bigword=None
	for word,counts in l.items():
		if bigcount is None or counts>bigcount:
			bigword=word
			bigcount=counts
	
	return bigword

#seq='CGGTCAATTCGAACTACTGGCAGAACGTGCAGAAAGGCGCGAAGGCGGCGCTCGACGGCGCGAAGGGCTACACGATGACGTTCCAGGGCCCGGCGGCCGAGTCCGACATCAGCGGCCAGGTCAACATGGTCGACAACGCGGTCACGCGGCATGTGGCGGGCATCGTGCTCGCGCCGTCCGATCCCGATGCGCTGGTGCCCGCGATCAAGAAGGCGTGGGAAGCGCACATTCCCGTCGTGCTGATCGACTCGGCGATCGCGGACGCCGGCAAGCCGTACTACCAGGCGTTCCTGTCGACCGACAACGAGAAGGCGGGCGCGCTGTGCGCGAAGGCGCTGATCGACCGCGTCGGGCAGTCGGGCAAGATCGCGATCATGTCGTACGTGCCGGGCGCGGGGTCCGAGGTCAGCCGCGTCGGCGGGTTCCGCAAGTACATCGAGAGCCATTCGAAGCTGCAGGTCGTCGGCCCGTACTACTCGCAATCGCAAATGGCGACCGCGCTGAACCAGACGACCGACGTGCTGTCGGCGAACCCGGACCTGAAGGGCATCTTCGGCGCGAACGAGCCGACCGCGGTCGGGATGGGCCGTGCGCTGAAGCAGTCGGGCAAGGCGGGCAAGGTGGTGGCGATCGGGTTCGACGGCAACGAGGACCTGCAGGGCTTCGTGCGCGACGGCACCGTGCAGGCGATCGCCGTGCAGGGCTCGTGGCAGATGGGGAACCAGGGCGTGCGCACGGCGCTCGACGTGATCGAGCGCAAGCCCGCGCCGAAGCTGATCGATACCGGCGTCGTGATGGTCGACAAGCAGAACCTCGATTCGCAGGCGGCGAAGAACGTCCTGTACTGATCCCTTTTCCCCGCATCCGGTTACGCCTCATGAATGCAAACGATACGCGCACCTTGCCGCGCAGCGGGCTGACGGTGTCCGCGCTCGGCCTCGGCTGCTCGCAGCTCGGCGGCCTTTATCGGCCGATGTCGGCCGCCGATGCCGCCGCGCTCGTCGACGCCGCGTGGGCGGCCGGCCTGCGCTATTTCGACACCGCGCCGTATTACGGCTACACGCTGTCCGAGCGGCGCGTGGGGGCGGGGCTCGCCCCGCGCGAGCGCCGCGCCTTCACGCTCAGCACGAAGGTCGGGCGGCTGATGCGGGCCGACGCGAGCGTGCGGCCGGGCGACGACGGCTGGGCGGAGCCGCTGCCGTTCCGGCCGGTGTACGACTACAGCTACGACGGCATCATGCGCTCGCACGACGACAGCCGGCAACGGCTCGGGCTCGCGCGAGTCGACATGCTGTACGTGCACGACATCGGCGCGATGACGCACGGCGATCGTCACGCGCACTACTGGGACCAGTTGACCCGCGGCGGCGGGTTTCGCGCGCTGGATGCGTTGCGCTCGGGCGGCGAGATCGGCGGGTTCGGTCTCGGCGTGAACGAATGGGAAGTCGCGGCCGACGCGCTGAACGAAGCGGCGCTCGATGCGGTGCTGCTGGCCGGCCGCTATACGCTGCTCGAACAGACGGCGCTCGAACCGCTGCTCGACGCGTGTGCCCGTGAAGGGACGGCGATCGTGATCGGCGGCGTGTTCAATTCCGGTTTGCTCGCCGGCAACGGCAAATTCAACTATGCGGACGCGAGCGCCGACGTGATCGACAAGGCGACGCGGCTCGGCGCGTTGTGCAACCGCTTCGACGTGCCGCTTCCGGCCGCGGCGTTGCAGTTTCCGTTCGGCCATCCGGCCGTCGTGTCGTGCGTGGTCGGCGCGCGCAGCGTGGCTCAGCTGAAGCAGAACATCGCATGGTTCGAGCGCCCCGCGCCGGCCGAGCTGTGGGATGCGCTGCGCGACGAAGGGCTGATCGCGGCGCACGCGCCGGTGCCGGGAGCACACGCATGACCCCGCGCATCGACGCCCATCAGCACTACTGGCGCATCGACGCGCGGGCCGGCTGCTGGCCGCCGGCCGAGCTCGACGCGATTCACCGGGATTTCGGCCCGGCCGATCTGGCGCCGCTGCTCGACGCCGCGCGCATCGATATCACCGTCGTCGTGCAGTCGCTGCCGAGCGAAGCCGACACGCGCTTTCTGCTCGATCTCGCGGCTGAAACGCCGAGCGTCGGCGCCGTGGTCGGCTGGGTCGACCTGAAGGCCGACGACGCACCCGCGCGGATCGCGGCGTTTGCATCCGCGCCGAAGGCGCGCGGCTTGCGACCGATGCTGCAGGATCTGCCCGACGACGCGTGGATCGACGATCCGCGGCTGGATCGCGCAGTCGCCGCGATGCTCGAGTACGGGCTGCGTTTCGATGCGCTGGTGATGCCGCGCCATCTCGATGCGCTGCACGCGTTCGCGCAACGCCATCCGGATCTGCCGATCGTGATCGACCACGGCGCGAAGCCGTTCATCGAGCGCGGCGAGATGCAGCCGTGGCTAACGGCGATGCGCAGGCTCGCGAGCCTGCCGAACCTGCATTGCAAGCTGTCCGGCCTCTGGACGGAAGCCGGGCCGTCGGCCGGCCCGGATGCGGTGCGCGCACGCACGCGGCCGTATGTCCAGGCGCTGGCCGAGCTGTTCGGGCCGACGCGCTTGATGTGGGGCAGCGACTGGCCGGTGCTGCGGCTGGCGTCGGCGTGCGGCGGCTACGGCGAATGGCTGGCCGCGTGCGAGGACGACTGCGCGCAGATGCTCGGCGCCGCGGCGCTGGAGGACCTTTTCGGCGGCAACGCGCGCCGCTTCTACCGGATCGACACCGCACGCCACGACGAATGAACCAGAACGAAAGGAAACCGACATGCTCAGCGTGATTTGCGAATCCCCCGGCGTGCTGCGCGTGCAGCATCGCGAGCTGCCCGTGCGCGGCAGCGGCGAAGTGCTGTTGCGCGTGCAACGGGTCGGCATCTGCGGCACCGATCTGCACATCTTCACCGGCAACCAGCCGTACCTCGACTATCCGCGCGTGATGGGCCACGAGCTGTCGGCGGTCGTCGTCGAGGCGGAAGCCGAGTCGGGGCTCGGCGCCGGCGACGCGGTGTACGTGATGCCGTATCTGTCGTGCGGGCACTGCGTCGCCTGCCGTCACGGCAACACGAACTGCTGCGTGAACATCAAGGTGCTCGGCGTGCATCGCGACGGCGCACTCGCCGAATACCTGAGCGTGCCCGCGCAGTTCGTGCACAAGGCCGACGGCATTTCGCTCGACCAGGCGGCGATGCTCGAATTTCTCGCGATCGGCGCGCATGCGGTGCGGCGCGCGGACATCCGCGCCGGGCAGCGCGCGCTGGTCGTCGGCGCCGGGCCGATCGGCATGGCCGCGATGATCTTCGCGAAGCTGCGCGGCGCCGACGTCACGTGCCTCGACACGCGGGCCGACCGGCTGGCGTTCTGCCGCCAGCATCTGGCGGTCGATGCGGCGGTGGAGGTGGGGGAAGGCGACGCGGAGCGTCTCGCGTCGTTGACGAACGGCGAGTATTTCGATGCGGTGTTCGACGCGACCGGCAACCTCGATGCGATGAATCGCGGTTTCGAATTCGTCGCGCACGGCGGCAAATACACGTTGATCTCGATCGTGCGCGGGCACGTCGCGTTTTCGGATCCCGAGTTCCACAAGCGGGAAACCACGCTGCTCGCGAGCCGCAATGCGACGGCCGAGGATTTCGCGACGGTGCTCGACGCGATGCGCGCGGGGCGCATTCCGGACCGCGCGCTGAACACGCACCGGATGCGGCTCGATGAGGTGCCGGACGCGCTGCCGCGTCTGCTGGATGCCGGGCAGACCGTCGTGAAGGCGCTCGTCGAATGCTGATCTATCGAATCCGCCACGCGGAGCGCACGCGATGACGCCGCCGATCCTGCAGTTCGGCACGAGCCGCTTCCTGCTCGCGCACGTCGACCTGTTCGTCTCCCAGGCGCTGGACGAAGGCAACGCGATCGGCGGCATCGGCATCGTGCAGACGACCGGCAATCCGGCCAGCCGCGCCCGCATCGACGCGCTGCGCGCCACCGGCCGCTATCCGGTGCGGATTCGCGGGCGCGAGCGCGGCGGCGTGGTCGACGAAGTCGTCGAGTGCCGCGCCGTGCAGCGCGCGTGGGACGCCGAGCGCGACTGGGCGGAAATACGCGGCGCCGCGATCGAGACGGTGCGCGTGATCGTGTCGAACACCGGCGACGCAGGCTATCGCGCCGATCCGCGCGACGCCGCAAAC'
#translate_DNA_codon(seq)

def find_orfs_with_trans(seq, trans_table, min_protein_length):
    answer = []
    seq_len = len(seq)
    for strand, nuc in [(+1, seq)]:
        trans = str(translate_DNA_codon(nuc[frame:]))
        trans_len = len(trans)
        aa_start = 0
        aa_end = 0
        while aa_start < trans_len:
            aa_end = trans.find("*", aa_start)
            if aa_end == -1:
                aa_end = trans_len
            if aa_end-aa_start >= min_protein_length:
                if strand == 1:
                    start = frame+aa_start*3
                    end = min(seq_len,frame+aa_end*3+3)
                else:
                    start = seq_len-frame-aa_end*3-3
                    end = seq_len-frame-aa_start*3
                answer.append((start, end, strand,
                                   trans[aa_start:aa_end]))
            aa_start = aa_end+1
    answer.sort()
    return answer
for record in SeqIO.parse("dna1.fasta.fasta", "fasta"):
	orf_list = find_orfs_with_trans(record.seq, table, min_pro_len)
	for start, end, strand, pro in orf_list:
   		print("%s...%s - length %i, strand %i, %i:%i" \
          % (pro[:30], pro[-3:], len(pro)*3, strand, start, end))